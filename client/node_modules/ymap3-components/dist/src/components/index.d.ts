import YMapComponentsProvider from "./YMapComponentsProvider";
import React from "react";
import YMapHint, { YMapHintContext } from "./YMapHint";
import * as YMaps from '@yandex/ymaps3-types';
import * as YMapsReact from '@yandex/ymaps3-types/react';
import * as Controls from '@yandex/ymaps3-types/packages/controls';
import * as ControlsReact from '@yandex/ymaps3-types/packages/controls/react';
import * as Markers from '@yandex/ymaps3-types/packages/markers';
import * as MarkersReact from '@yandex/ymaps3-types/packages/markers/react';
import * as Clusterer from '@yandex/ymaps3-types/packages/clusterer';
import * as ClustererReact from '@yandex/ymaps3-types/packages/clusterer/react';
export { YMapHint, YMapHintContext, YMapComponentsProvider };
export type YMapGeolocationControlProps = React.ComponentPropsWithoutRef<typeof ControlsReact.YMapGeolocationControl>;
export declare const YMapGeolocationControl: React.ForwardRefExoticComponent<Omit<Controls.YMapGeolocationControlProps & {
    children?: React.ReactNode;
} & React.RefAttributes<Controls.YMapGeolocationControl | undefined>, "ref"> & React.RefAttributes<Controls.YMapGeolocationControl>>;
export type YMapZoomControlProps = React.ComponentPropsWithoutRef<typeof ControlsReact.YMapZoomControl>;
export declare const YMapZoomControl: React.ForwardRefExoticComponent<Omit<Controls.YMapZoomControlProps & {
    children?: React.ReactNode;
} & React.RefAttributes<Controls.YMapZoomControl | undefined>, "ref"> & React.RefAttributes<Controls.YMapZoomControlProps>>;
export type YMapClustererProps = React.ComponentPropsWithoutRef<typeof ClustererReact.YMapClusterer>;
export declare const YMapClusterer: React.ForwardRefExoticComponent<Omit<{
    features: Clusterer.Feature[];
    tickTimeout?: number | undefined;
    method: Clusterer.IClusterMethod;
    onRender?: ((clusters: Clusterer.ClustererObject[]) => false | void) | undefined;
    maxZoom?: number | undefined;
    marker: (feature: Clusterer.Feature) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    cluster: (coordinates: YMaps.LngLat, features: Clusterer.Feature[]) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    ref?: React.Ref<YMaps.YMapEntity<{
        features: Clusterer.Feature[];
        tickTimeout?: number | undefined;
        method: Clusterer.IClusterMethod;
        onRender?: ((clusters: Clusterer.ClustererObject[]) => false | void) | undefined;
        maxZoom?: number | undefined;
        marker: (feature: Clusterer.Feature) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        cluster: (coordinates: YMaps.LngLat, features: Clusterer.Feature[]) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    }, {}>> | undefined;
    key?: React.Key | null | undefined;
}, "ref"> & React.RefAttributes<Clusterer.YMapClusterer>>;
export type YMapDefaultMarkerProps = React.ComponentPropsWithoutRef<typeof MarkersReact.YMapDefaultMarker>;
export declare const YMapDefaultMarker: React.ForwardRefExoticComponent<Omit<{
    coordinates: YMaps.LngLat;
    source?: string | undefined;
    zIndex?: number | undefined;
    properties?: Record<string, unknown> | undefined;
    id?: string | undefined;
    disableRoundCoordinates?: boolean | undefined;
    hideOutsideViewport?: YMaps.HideOutsideRule | undefined;
    draggable?: boolean | undefined;
    mapFollowsOnDrag?: boolean | {
        activeZoneMargin?: YMaps.Margin | undefined;
    } | undefined;
    onDragStart?: YMaps.YMapMarkerEventHandler | undefined;
    onDragEnd?: YMaps.YMapMarkerEventHandler | undefined;
    onDragMove?: YMaps.YMapMarkerEventHandler | undefined;
    blockEvents?: boolean | undefined;
    blockBehaviors?: boolean | undefined;
    onDoubleClick?: ((event: MouseEvent) => void) | undefined;
    onClick?: ((event: MouseEvent) => void) | undefined;
    onFastClick?: ((event: MouseEvent) => void) | undefined;
    title?: string | undefined;
    subtitle?: string | undefined;
    color?: string | undefined;
    popup?: {
        content: string | ((close: () => void) => HTMLElement);
        position: "top" | "left" | "right";
        hidesMarker?: boolean | undefined;
    } | undefined;
    children?: React.ReactNode;
    ref?: React.Ref<YMaps.YMapEntity<Markers.YMapDefaultMarkerProps, {}>> | undefined;
    key?: React.Key | null | undefined;
}, "ref"> & React.RefAttributes<Markers.YMapDefaultMarker>>;
export type YMapProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMap>;
export declare const YMap: React.ForwardRefExoticComponent<Omit<{
    className?: string | undefined;
    location: YMaps.YMapLocationRequest;
    camera?: YMaps.YMapCameraRequest | undefined;
    mode?: YMaps.MapMode | undefined;
    behaviors?: YMaps.BehaviorType[] | undefined;
    restrictMapArea?: false | YMaps.LngLatBounds | undefined;
    zoomRange?: YMaps.ZoomRange | undefined;
    zoomStrategy?: YMaps.ZoomStrategy | undefined;
    zoomRounding?: YMaps.ZoomRounding | undefined;
    margin?: YMaps.Margin | undefined;
    config?: YMaps.Config | undefined;
    hotspotsStrategy?: "forViewport" | "forPointerPosition" | undefined;
    copyrights?: boolean | undefined;
    copyrightsPosition?: YMaps.YMapCopyrightsPosition | undefined;
    projection?: YMaps.Projection | undefined;
    worldOptions?: YMaps.WorldOptions | undefined;
    theme?: YMaps.YMapTheme | undefined;
    children?: React.ReactNode;
    ref?: React.Ref<YMaps.YMap> | undefined;
    key?: React.Key | null | undefined;
}, "ref"> & React.RefAttributes<YMaps.YMap>>;
export type YMapTileDataSourceProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapTileDataSource>;
export declare const YMapTileDataSource: React.ForwardRefExoticComponent<Omit<YMaps.YMapTileDataSourceProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapTileDataSource | undefined>, "ref"> & React.RefAttributes<YMaps.YMapTileDataSource>>;
export declare const ThemeContext: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<YMaps.YMapThemeContext>>;
export type YMapControlProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapControl>;
export declare const YMapControl: React.ForwardRefExoticComponent<Omit<{
    children?: React.ReactNode;
    ref?: React.Ref<import("@yandex/ymaps3-types/imperative/Entities").GenericEntity<{
        controlElement: HTMLElement;
    }, {}, import("@yandex/ymaps3-types/imperative/Entities").GenericRootEntity<unknown, {}>>> | undefined;
    key?: React.Key | null | undefined;
}, "ref"> & React.RefAttributes<YMaps.YMapControl<YMaps.YMapControlProps>>>;
export type YMapLayerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapLayer>;
export declare const YMapLayer: React.ForwardRefExoticComponent<Omit<YMaps.YMapLayerProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapLayer | undefined>, "ref"> & React.RefAttributes<YMaps.YMapLayer>>;
export type YMapMarkerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapMarker>;
export declare const YMapMarker: React.ForwardRefExoticComponent<Omit<{
    coordinates: YMaps.LngLat;
    source?: string | undefined;
    zIndex?: number | undefined;
    properties?: Record<string, unknown> | undefined;
    id?: string | undefined;
    disableRoundCoordinates?: boolean | undefined;
    hideOutsideViewport?: YMaps.HideOutsideRule | undefined;
    draggable?: boolean | undefined;
    mapFollowsOnDrag?: boolean | {
        activeZoneMargin?: YMaps.Margin | undefined;
    } | undefined;
    onDragStart?: YMaps.YMapMarkerEventHandler | undefined;
    onDragEnd?: YMaps.YMapMarkerEventHandler | undefined;
    onDragMove?: YMaps.YMapMarkerEventHandler | undefined;
    blockEvents?: boolean | undefined;
    blockBehaviors?: boolean | undefined;
    onDoubleClick?: ((event: MouseEvent) => void) | undefined;
    onClick?: ((event: MouseEvent) => void) | undefined;
    onFastClick?: ((event: MouseEvent) => void) | undefined;
    markerElement?: HTMLElement | undefined;
    children?: React.ReactNode;
    ref?: React.Ref<import("@yandex/ymaps3-types/imperative/Entities").GenericEntity<{
        coordinates: YMaps.LngLat;
        source?: string | undefined;
        zIndex?: number | undefined;
        properties?: Record<string, unknown> | undefined;
        id?: string | undefined;
        disableRoundCoordinates?: boolean | undefined;
        hideOutsideViewport?: YMaps.HideOutsideRule | undefined;
    } & import("@yandex/ymaps3-types/imperative/YMapFeature/types").DraggableProps<YMaps.YMapMarkerEventHandler> & import("@yandex/ymaps3-types/imperative/YMapFeature/types").FeatureClickEvents & {
        markerElement?: HTMLElement | undefined;
    }, {}, import("@yandex/ymaps3-types/imperative/Entities").GenericRootEntity<unknown, {}>>> | undefined;
    key?: React.Key | null | undefined;
}, "ref"> & React.RefAttributes<YMaps.YMapMarker>>;
export type YMapDefaultSchemeLayerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapDefaultSchemeLayer>;
export declare const YMapDefaultSchemeLayer: React.ForwardRefExoticComponent<Omit<YMaps.YMapDefaultSchemeLayerProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapDefaultSchemeLayer | undefined>, "ref"> & React.RefAttributes<YMaps.YMapDefaultSchemeLayer>>;
export type YMapDefaultFeaturesLayerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapDefaultFeaturesLayer>;
export declare const YMapDefaultFeaturesLayer: React.ForwardRefExoticComponent<Omit<YMaps.YMapDefaultFeaturesLayerProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapDefaultFeaturesLayer | undefined>, "ref"> & React.RefAttributes<YMaps.YMapDefaultFeaturesLayer>>;
export type YMapDefaultSatelliteLayerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapDefaultSatelliteLayer>;
export declare const YMapDefaultSatelliteLayer: React.ForwardRefExoticComponent<Omit<YMaps.YMapDefaultSatelliteLayerProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapDefaultSatelliteLayer | undefined>, "ref"> & React.RefAttributes<YMaps.YMapDefaultSatelliteLayer>>;
export type YMapListenerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapListener>;
export declare const YMapListener: React.ForwardRefExoticComponent<YMapListenerProps & React.RefAttributes<YMaps.YMapListener>>;
export type YMapControlsProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapControls>;
export declare const YMapControls: React.ForwardRefExoticComponent<Omit<YMaps.YMapControlsProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapControls | undefined>, "ref"> & React.RefAttributes<YMaps.YMapControls>>;
export type YMapControlButtonProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapControlButton>;
export declare const YMapControlButton: React.ForwardRefExoticComponent<Omit<{
    onClick?: (() => void) | undefined;
    disabled?: boolean | undefined;
    text?: string | undefined;
    color?: string | undefined;
    background?: string | undefined;
    element?: HTMLElement | undefined;
    children?: React.ReactNode;
    ref?: React.Ref<import("@yandex/ymaps3-types/imperative/Entities").GenericEntity<import("@yandex/ymaps3-types/imperative/YMapControl").YMapControlCommonButtonProps, {}, import("@yandex/ymaps3-types/imperative/Entities").GenericRootEntity<unknown, {}>>> | undefined;
    key?: React.Key | null | undefined;
}, "ref"> & React.RefAttributes<YMaps.YMapControlButton>>;
export type YMapContainerProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapContainer>;
export declare const YMapContainer: React.ForwardRefExoticComponent<import("@yandex/ymaps3-types/imperative/YMapReactContainer").YMapReactContainerProps<unknown> & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapContainer>>;
export type YMapCollectionProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapCollection>;
export declare const YMapCollection: React.ForwardRefExoticComponent<Omit<{
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapCollection | undefined>, "ref"> & React.RefAttributes<YMaps.YMapCollection>>;
export type YMapFeatureProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapFeature>;
export declare const YMapFeature: React.ForwardRefExoticComponent<Omit<{
    id?: string | undefined;
    geometry: import("@yandex/ymaps3-types/imperative/YMapFeature/types").Geometry;
    source?: string | undefined;
    style?: YMaps.DrawingStyle | undefined;
    properties?: Record<string, unknown> | undefined;
    disableRoundCoordinates?: boolean | undefined;
    hideOutsideViewport?: YMaps.HideOutsideRule | undefined;
} & import("@yandex/ymaps3-types/imperative/YMapFeature/types").DraggableProps<import("@yandex/ymaps3-types/imperative/YMapFeature/types").YMapFeatureEventHandler> & import("@yandex/ymaps3-types/imperative/YMapFeature/types").FeatureClickEvents & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapFeature | undefined>, "ref"> & React.RefAttributes<YMaps.YMapFeature>>;
export type YMapFeatureDataSourceProps = React.ComponentPropsWithoutRef<typeof YMapsReact.YMapFeatureDataSource>;
export declare const YMapFeatureDataSource: React.ForwardRefExoticComponent<Omit<YMaps.YMapFeatureDataSourceProps & {
    children?: React.ReactNode;
} & React.RefAttributes<YMaps.YMapFeatureDataSource | undefined>, "ref"> & React.RefAttributes<YMaps.YMapFeatureDataSource>>;
